<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.xm.exam.mapper.employee.out.BreakrulesMapper">
	<resultMap id="BaseResultMap" type="cn.xm.exam.bean.employee.out.Breakrules">
		<id column="breakId" property="breakid" jdbcType="INTEGER" />
		<result column="employeeId" property="employeeid" jdbcType="VARCHAR" />
		<result column="BigEmployeeoutId" property="bigemployeeoutid"
			jdbcType="VARCHAR" />
		<result column="breakContent" property="breakcontent" jdbcType="VARCHAR" />
		<result column="breakTime" property="breaktime" jdbcType="TIMESTAMP" />
		<result column="minusNum" property="minusnum" jdbcType="INTEGER" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		breakId, employeeId, BigEmployeeoutId, breakContent,
		breakTime, minusNum
	</sql>
	<select id="selectByExample" resultMap="BaseResultMap"
		parameterType="cn.xm.exam.bean.employee.out.BreakrulesExample">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from breakrules
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from breakrules
		where breakId = #{breakid,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from
		breakrules
		where breakId = #{breakid,jdbcType=INTEGER}
	</delete>
	<delete id="deleteByExample" parameterType="cn.xm.exam.bean.employee.out.BreakrulesExample">
		delete from breakrules
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="cn.xm.exam.bean.employee.out.Breakrules">
		insert into breakrules
		(breakId, employeeId, BigEmployeeoutId,
		breakContent, breakTime,
		minusNum
		)
		values (#{breakid,jdbcType=INTEGER},
		#{employeeid,jdbcType=VARCHAR},
		#{bigemployeeoutid,jdbcType=VARCHAR},
		#{breakcontent,jdbcType=VARCHAR}, #{breaktime,jdbcType=TIMESTAMP},
		#{minusnum,jdbcType=INTEGER}
		)
	</insert>
	<insert id="insertSelective" parameterType="cn.xm.exam.bean.employee.out.Breakrules">
		insert into breakrules
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="breakid != null">
				breakId,
			</if>
			<if test="employeeid != null">
				employeeId,
			</if>
			<if test="bigemployeeoutid != null">
				BigEmployeeoutId,
			</if>
			<if test="breakcontent != null">
				breakContent,
			</if>
			<if test="breaktime != null">
				breakTime,
			</if>
			<if test="minusnum != null">
				minusNum,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="breakid != null">
				#{breakid,jdbcType=INTEGER},
			</if>
			<if test="employeeid != null">
				#{employeeid,jdbcType=VARCHAR},
			</if>
			<if test="bigemployeeoutid != null">
				#{bigemployeeoutid,jdbcType=VARCHAR},
			</if>
			<if test="breakcontent != null">
				#{breakcontent,jdbcType=VARCHAR},
			</if>
			<if test="breaktime != null">
				#{breaktime,jdbcType=TIMESTAMP},
			</if>
			<if test="minusnum != null">
				#{minusnum,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	<select id="countByExample" parameterType="cn.xm.exam.bean.employee.out.BreakrulesExample"
		resultType="java.lang.Integer">
		select count(*) from breakrules
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		update breakrules
		<set>
			<if test="record.breakid != null">
				breakId = #{record.breakid,jdbcType=INTEGER},
			</if>
			<if test="record.employeeid != null">
				employeeId = #{record.employeeid,jdbcType=VARCHAR},
			</if>
			<if test="record.bigemployeeoutid != null">
				BigEmployeeoutId =
				#{record.bigemployeeoutid,jdbcType=VARCHAR},
			</if>
			<if test="record.breakcontent != null">
				breakContent = #{record.breakcontent,jdbcType=VARCHAR},
			</if>
			<if test="record.breaktime != null">
				breakTime = #{record.breaktime,jdbcType=TIMESTAMP},
			</if>
			<if test="record.minusnum != null">
				minusNum = #{record.minusnum,jdbcType=INTEGER},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update breakrules
		set breakId = #{record.breakid,jdbcType=INTEGER},
		employeeId = #{record.employeeid,jdbcType=VARCHAR},
		BigEmployeeoutId =
		#{record.bigemployeeoutid,jdbcType=VARCHAR},
		breakContent =
		#{record.breakcontent,jdbcType=VARCHAR},
		breakTime =
		#{record.breaktime,jdbcType=TIMESTAMP},
		minusNum =
		#{record.minusnum,jdbcType=INTEGER}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="cn.xm.exam.bean.employee.out.Breakrules">
		update breakrules
		<set>
			<if test="employeeid != null">
				employeeId = #{employeeid,jdbcType=VARCHAR},
			</if>
			<if test="bigemployeeoutid != null">
				BigEmployeeoutId = #{bigemployeeoutid,jdbcType=VARCHAR},
			</if>
			<if test="breakcontent != null">
				breakContent = #{breakcontent,jdbcType=VARCHAR},
			</if>
			<if test="breaktime != null">
				breakTime = #{breaktime,jdbcType=TIMESTAMP},
			</if>
			<if test="minusnum != null">
				minusNum = #{minusnum,jdbcType=INTEGER},
			</if>
		</set>
		where breakId = #{breakid,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="cn.xm.exam.bean.employee.out.Breakrules">
		update breakrules
		set employeeId = #{employeeid,jdbcType=VARCHAR},
		BigEmployeeoutId =
		#{bigemployeeoutid,jdbcType=VARCHAR},
		breakContent =
		#{breakcontent,jdbcType=VARCHAR},
		breakTime =
		#{breaktime,jdbcType=TIMESTAMP},
		minusNum =
		#{minusnum,jdbcType=INTEGER}
		where breakId =
		#{breakid,jdbcType=INTEGER}
	</update>





</mapper>