<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.xm.exam.mapper.employee.in.EmplyinBreakrulesMapper">
	<resultMap id="BaseResultMap" type="cn.xm.exam.bean.employee.in.EmplyinBreakrules">
		<id column="empInBreakId" property="empinbreakid" jdbcType="INTEGER" />
		<result column="empInEmployeeId" property="empinemployeeid"
			jdbcType="VARCHAR" />
		<result column="empInBreakContent" property="empinbreakcontent"
			jdbcType="VARCHAR" />
		<result column="empInBreakTime" property="empinbreaktime"
			jdbcType="TIMESTAMP" />
		<result column="empInMinusNum" property="empinminusnum"
			jdbcType="INTEGER" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		empInBreakId, empInEmployeeId, empInBreakContent,
		empInBreakTime, empInMinusNum
	</sql>
	<select id="selectByExample" resultMap="BaseResultMap"
		parameterType="cn.xm.exam.bean.employee.in.EmplyinBreakrulesExample">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from emplyin_breakrules
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from emplyin_breakrules
		where empInBreakId =
		#{empinbreakid,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from
		emplyin_breakrules
		where empInBreakId =
		#{empinbreakid,jdbcType=INTEGER}
	</delete>
	<delete id="deleteByExample"
		parameterType="cn.xm.exam.bean.employee.in.EmplyinBreakrulesExample">
		delete from emplyin_breakrules
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="cn.xm.exam.bean.employee.in.EmplyinBreakrules">
		insert into emplyin_breakrules
		(empInBreakId, empInEmployeeId,
		empInBreakContent,
		empInBreakTime,
		empInMinusNum)
		values (#{empinbreakid,jdbcType=INTEGER},
		#{empinemployeeid,jdbcType=VARCHAR},
		#{empinbreakcontent,jdbcType=VARCHAR},
		#{empinbreaktime,jdbcType=TIMESTAMP},
		#{empinminusnum,jdbcType=INTEGER})
	</insert>
	<insert id="insertSelective" parameterType="cn.xm.exam.bean.employee.in.EmplyinBreakrules">
		insert into emplyin_breakrules
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="empinbreakid != null">
				empInBreakId,
			</if>
			<if test="empinemployeeid != null">
				empInEmployeeId,
			</if>
			<if test="empinbreakcontent != null">
				empInBreakContent,
			</if>
			<if test="empinbreaktime != null">
				empInBreakTime,
			</if>
			<if test="empinminusnum != null">
				empInMinusNum,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="empinbreakid != null">
				#{empinbreakid,jdbcType=INTEGER},
			</if>
			<if test="empinemployeeid != null">
				#{empinemployeeid,jdbcType=VARCHAR},
			</if>
			<if test="empinbreakcontent != null">
				#{empinbreakcontent,jdbcType=VARCHAR},
			</if>
			<if test="empinbreaktime != null">
				#{empinbreaktime,jdbcType=TIMESTAMP},
			</if>
			<if test="empinminusnum != null">
				#{empinminusnum,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	<select id="countByExample"
		parameterType="cn.xm.exam.bean.employee.in.EmplyinBreakrulesExample"
		resultType="java.lang.Integer">
		select count(*) from emplyin_breakrules
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		update emplyin_breakrules
		<set>
			<if test="record.empinbreakid != null">
				empInBreakId = #{record.empinbreakid,jdbcType=INTEGER},
			</if>
			<if test="record.empinemployeeid != null">
				empInEmployeeId =
				#{record.empinemployeeid,jdbcType=VARCHAR},
			</if>
			<if test="record.empinbreakcontent != null">
				empInBreakContent =
				#{record.empinbreakcontent,jdbcType=VARCHAR},
			</if>
			<if test="record.empinbreaktime != null">
				empInBreakTime =
				#{record.empinbreaktime,jdbcType=TIMESTAMP},
			</if>
			<if test="record.empinminusnum != null">
				empInMinusNum = #{record.empinminusnum,jdbcType=INTEGER},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update emplyin_breakrules
		set empInBreakId =
		#{record.empinbreakid,jdbcType=INTEGER},
		empInEmployeeId =
		#{record.empinemployeeid,jdbcType=VARCHAR},
		empInBreakContent =
		#{record.empinbreakcontent,jdbcType=VARCHAR},
		empInBreakTime =
		#{record.empinbreaktime,jdbcType=TIMESTAMP},
		empInMinusNum =
		#{record.empinminusnum,jdbcType=INTEGER}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="cn.xm.exam.bean.employee.in.EmplyinBreakrules">
		update emplyin_breakrules
		<set>
			<if test="empinemployeeid != null">
				empInEmployeeId = #{empinemployeeid,jdbcType=VARCHAR},
			</if>
			<if test="empinbreakcontent != null">
				empInBreakContent =
				#{empinbreakcontent,jdbcType=VARCHAR},
			</if>
			<if test="empinbreaktime != null">
				empInBreakTime = #{empinbreaktime,jdbcType=TIMESTAMP},
			</if>
			<if test="empinminusnum != null">
				empInMinusNum = #{empinminusnum,jdbcType=INTEGER},
			</if>
		</set>
		where empInBreakId = #{empinbreakid,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="cn.xm.exam.bean.employee.in.EmplyinBreakrules">
		update
		emplyin_breakrules
		set empInEmployeeId =
		#{empinemployeeid,jdbcType=VARCHAR},
		empInBreakContent =
		#{empinbreakcontent,jdbcType=VARCHAR},
		empInBreakTime =
		#{empinbreaktime,jdbcType=TIMESTAMP},
		empInMinusNum =
		#{empinminusnum,jdbcType=INTEGER}
		where empInBreakId =
		#{empinbreakid,jdbcType=INTEGER}
	</update>
</mapper>